
@incollection   {SEER2007:Vaughan,
  title =       {Reusable Robot Software and the Player/Stage Project},
  author =      {Vaughan, Richard T.  and Gerkey, Brian},
  editor =      {Brugali, Davide},
  booktitle =   {Software Engineering for Experimental Robotics},
  series =      {Springer Tracts in Advanced Robotics},
  year =        {2007},
  month =       {April},
  volume =      {30},
  publisher =   {Springer - Verlag},
  isbn =        {978-3-540-68949-2},
  url =         {http://dx.doi.org/10.1007/978-3-540-68951-5_16 10.1007/978-3-540-68951-5_16},
  abstract =    {There exist many robot programming tools and frameworks designed to promote this idea, some of which have been actively developed for several years using very fine software engineering techniques. However, very few supposedly reusable systems are extensively used outside their home institution or their immediate collaborators. Many well-engineered systems are never used at all. This suggests that there is more to getting code widely reused than nice code design, however principled.}
}

@article        {IJSEK1996:Stewart,
  title =       {The Chimera Methodology: Designing Dynamically Reconfigurable and Reusable Real-Time Software using Port-Based Objects},
  author =      {Stewart, D. B.  and Khosla, P. },
  journal =     {International Journal of Software Engineering and Knowledge Engineering},
  year =        {1996},
  month =       {June},
  volume =      {6},
  number =      {2},
  pages =       {249--277},
  url =         {http://citeseer.ist.psu.edu/18515.html},
  abstract =    {The Chimera Methodology is a software engineering paradigm that enables rapid development of real-time applications through use of dynamically reconfigurable and reusable software. It is targeted towards a distributed shared memory computing environment. The primary contribution of this research is the port-based object model of a real-time software component. The model is obtained by applying the portautomaton formal computational theory to object-based design.}
}

@article        {JARS2006:Colon,
  title =       {CoRoBa, a multi mobile robot control and simulation framework},
  author =      {Colon, Eric and Sahli, Hichem and Baudoin, Yvan},
  editor =      {Brugali, Davide and Nesnas, Issa A. },
  journal =     {International Journal of Advanced Robotic Systems},
  year =        {2006},
  month =       {March},
  volume =      {3},
  number =      {1},
  pages =       {73--78},
  issn =        {1729-8806},
  url =         {http://intechweb.org/downloadpdf.php?id=4166},
  keywords =    {Distributed control, Middleware, CORBA, Design Patterns, 3D simulation},
  abstract =    {This paper describes on-going development of a multi robot control framework named CoRoBa. CoRoBa is theoretically founded by reifying Real Time Design Patterns. It uses CORBA as its communication Middleware and consequently benefits from the interoperability of this standard. A multi-robot 3D simulator written in Java3D integrates seamlessly with this framework. Several demonstration applications have been developed to validate the design and implementation options.}
}

@article        {IJAR2001:Zielinski,
  title =       {By How Much Should a General Purpose Programming Language be Extended to Become a Multi-Robot System Programming Language?},
  author =      {Zielinski, Cezary},
  journal =     {Advanced Robotics},
  year =        {2001},
  volume =      {15},
  number =      {1},
  pages =       {71--96},
  url =         {http://www.ia.pw.edu.pl/~zielinsk/advrob.pdf},
  abstract =    {The paper gives the answer to the question formulated in the title for the case of manipulator level languages. Theoretical considerations show that regardless of the type and number of robots and cooperating devices used in the system as well as irrespective of the number and kind of sensors included in the system, a general purpose language has to be extended by a single instruction with a rather complex semantics. Due to this complexity it is more convenient to introduce two, but much simpler instructions. The paper also presents the method of implementing those instructions in a hierarchical distributed control system. The presented approach has been used in the implementation of MRROC/MRROC   robot programming libraries/languages. The programmer uses predefined library modules to construct the controller structure solving a specifc multi-robot task. The structure is fine-tuned to the task at hand by supplying adequate motion generators in a plug-in fashion. The practical validity of the formal approach followed in the implementation of MRROC and MRROC   has been positively verified on diverse robotic tasks.}
}

@article        {IEEE-TSE1997:Stewart,
  title =       {Design of Dynamically Reconfigurable Real-Time Software Using Port-Based Objects},
  author =      {Stewart, D. B.  and Volpe, R. A.  and Khosla, P. },
  journal =     {IEEE Transactions on Software Engineering},
  year =        {1997},
  month =       {December},
  volume =      {23},
  number =      {12},
  pages =       {759--776},
  url =         {citeseer.ist.psu.edu/stewart93design.html},
  abstract =    {a "one-of-a-kind" process, where most software is developed from scratch, even though much of the code is similar to code written for other applications. The cost of these systems can be drastically reduced and the capability of these systems improved by providing a suitable software framework for all R&A sys~ terns, We describe a novel software framework, based on the notion of dynamically reconfigurable software for sensor-based control systems.}
}

@inproceedings  {ICIAS2008:Spexard,
  title =       {A Memory-based Software Integration for Development in Autonomous Robotics},
  author =      {Spexard, Thorsten P.  and Siepmann, Frederic H. K.  and Sagerer, Gerhard},
  booktitle =   {International Conference on Intelligent Autonomous Systems},
  year =        {2008},
  location =    {Baden-Baden, Germany},
  abstract =    {Focusing the development of non-industrial robotics in the last decade the growing impact of service and entertainment robots for daily life has developed from pure science fiction to a serious scientific subject. Beginning with the first approaches of tour guide robots with poor cognitive abilities in museums or huge office building nowadays sociable robots operating in households are in sight of scientists. But still many questions in how to solve everyday tasks like laying the table or even ''simpler'' detecting objects in unstructured areas with varying lighting conditions are unsolved. Therefore the strong need to evaluate and exchange different approaches and abilities of multiple robotic demonstrators under real world conditions is also a crucial aspect in the development of system architectures. In this paper an architecture will be described providing strong support for simple exchange and integration of new robot abilities.},
}

@inproceedings  {IROS2003:Montemerlo,
  title =       {Perspectives on Standardization in Mobile Robot Programming: The Carnegie Mellon Navigation (CARMEN) Toolkit},
  author =      {Montemerlo, Michael and Roy, Nicholas and Thrun, Sebastian},
  booktitle =   {Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems},
  year =        {2003},
  month =       {October},
  volume =      {3},
  pages =       {2436--2441},
  address =     {Las Vegas, NV},
  url =         {http://citeseer.ist.psu.edu/696059.html},
  abstract =    {In this paper we describe our open-source robot control software, the Carnegie Mellon Navigation (CARMEN) Toolkit. The ultimate goals of CARMEN are to lower the barrier to implementing new algorithms on real and simulated robots and to facilitate sharing of research and algorithms between different institutions. In order for CARMEN to be as inclusive of various research approaches as possible, we have chosen not to adopt strict software standards, but to instead focus on good design practices. This paper will outline the lessons we have learned in developing these practices.},
}

@inproceedings  {SIMPAR2008:Petters,
  title =       {Mutlilevel Testing of Control Software for Teams of Autonomous Mobile Robots},
  author =      {Sebastian Petters and Dirk Thomas and Martin Friedmann and Oskar von Stryk},
  year =        {2008},
  number =      {5325},
  pages =       {183-194},
  month =       {November},
  publisher =   {Springer},
  editor =      {S. Carpin et al.},
  series =      {Lecture Notes in Artificial Intelligence},
  booktitle =   {Simulation, Modeling and Programming for Autonomous Robots (SIMPAR 2008)},
  url =         {http://dx.doi.org/10.1007/978-3-540-89076-8_20},
  abstract =    {Developing control software for teams of autonomous mobile
robots is a challenging task, which can be facilitated using frameworks
with ready to use components. But testing and debugging the resulting
system as teached in modern software engineering to be free of errors and
tolerant to sensor noise in a real world scenario is to a large extend
beyond the scope of current approaches. In this paper multilevel testing
strategies using the developed frameworks RoboFrame and MuRoSimF are
presented. Testing incorporating automated tests, online and offline
analysis and software-in-the-loop (SIL) tests in combination with real
robot hardware or an adequate simulation are highly facilitated by the two
frameworks. Thus the efficiency of validation of complex real world
applications is improved. In this way potential errors can be identified
early in the development process and error situations in real world
operations can be reduced significantly.},
}



@inproceedings  {ROBIO2006:Friedmann,
  title =       {Modular software architecture for teams of cooperating, heterogeneous robots},
  author =      {M. Friedmann and J. Kiener and S. Petters and D. Thomas and O. von Stryk},
  year =        {2006},
  pages =       {613-618},
  month =       {December 17-20},
  address =     {Kunming, China},
  booktitle =   {Proc. IEEE International Conference on Robotics and Biomimetics (ROBIO)},
  abstract =    {For teams of cooperating autonomous lightweight robots with
challenging dynamical locomotion properties a platform independent modular
software architecture and platform independent modules for sensor data
processing, planning and motion control have been developed. The software
architecture allows high level communication between modules on different
abstraction levels of the control architecture within one robot system as
well as communication between different and heterogeneous robots and
computers using wireless network. Very different behavior control
paradigms may be realized on the basis of the developed architecture. The
application to teams of cooperating small and medium size humanoid robots
is investigated in this paper. Scenarios for inter robot communication and
cooperative task accomplishment are described.},
}
